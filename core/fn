#!/bin/bash

ensure_config() {
  load inquirer

  # load_config_file $PLUGIN_WORKSPACE_CONFIG
}

initialize_config() {
  zmicro config rc
}

initialize_common() {
  initialize_config

  # @TODO
  plugin::load_mod ${PLUGIN_WORKSPACE_NAME}

  log::info "zworkspace initialize common (version: $PLUGIN_VERSION) ..."

  zmicro config set ZWORKSPACE_VERSION $PLUGIN_VERSION

  zmicro package install zsh
  zmicro package install vim
  zmicro package install tmux
  # zmicro package install docker
  # zmicro package install inlets
}

initialize_role() {
  local role=$1

  log::info "zworkspace initialize role (role: $role) ..."

  zmicro config set ZWORKSPACE_ROLE $role

  case $role in
    nodejs)
      zmicro package install nodejs
      ;;
    go)
      zmicro package install go
      ;;
    deno)
      zmicro package install deno
      ;;
    rust)
      zmicro package install rust
      ;;
    python)
      zmicro package install python
      ;;
    common)
      ;;
    all)
      zmicro package install nodejs
      zmicro package install go
      zmicro package install deno
      zmicro package install rust
      zmicro package install python
      ;;
    *)
      log::error "[zworkspace][initialize_role] unknown role: ${role}"
      exit 1
      ;;
  esac
}

upgrade_role() {
  local role=$1

  initialize_role $role

  zmicro package install inlets
}

workspace::env_initialize() {
  local role=$1
  
  # 1. common
  initialize_common

  # 2. developer role
  if [ -n "$role" ]; then
    initialize_role $role
  fi

  # 3. inlets
  zmicro package install inlets
}

workspace::env_upgrade() {
  local role=$1

  # update self
  zmicro plugin update workspace

  # ensure update source list
  sudo apt update -y

  # @TODO
  plugin::load_mod $PLUGIN_WORKSPACE_NAME

  local version=$(zmicro config get ZWORKSPACE_VERSION)
  if [ -z "$version" ]; then
    initialize_common
  elif [ "$version" != "$PLUGIN_VERSION" ]; then
    initialize_common
  fi

  if [ -z "$role" ]; then
    role=$(zmicro config get ZWORKSPACE_ROLE)
  fi
  
  if [ -n "$role" ]; then
    log::info "Upgrading ${PLUGIN_WORKSPACE_NAME} with role: $role ..."

    upgrade_role $role
  fi
}

workspace::list() {
  local services=$(ls $ZMICRO_PLUGINS_CONFIGS_PATH/service/config)
  local workspaces=""
  for service in $services; do
    local workspace_file_path=$ZMICRO_PLUGINS_CONFIGS_PATH/service/config/$service/workspace
    if [ -f "$workspace_file_path" ]; then
      if [ "$workspaces" = "" ]; then
        workspaces="$service"
      else
        workspaces="$workspaces $service"
      fi
    fi
  done

  echo $workspaces
}

workspace::check_available() {
  local workspace=$1
  local port=$2
  if [ -z "$workspace" ]; then
    log::error "[workspace::check_available] workspace is empty"
    exit 1
  fi

  if [ -z "$port" ]; then
    log::error "[workspace::check_available] port is required"
    exit 1
  fi

  local workspaces=$(workspace::list)
  for w in $workspaces; do
    if [ "$w" = "$workspace" ]; then
      log::error "[workspace::check_available] workspace: $workspace is already exists"
      exit 1
    fi
  done

  for workspace in $workspaces; do
    local workspace_service_path=$ZMICRO_PLUGINS_CONFIGS_PATH/service/config/$workspace
    local workspace_config_path=$workspace_service_path/config
    if [ -f "$workspace_config_path" ]; then
      local port_exist=$(cat $workspace_config_path | grep SERVICE_REMOTEDEV_SSH_PORT | awk -F '=' '{print $2}')
      if [ -z "$port_exist" ]; then
        continue
      fi
      
      # echo "port_exist: $port_exist"
      if [ "$port" = "$port_exist" ]; then
        log::error "[workspace::check_available] port: $port is already exists"
        exit 1
      fi
    fi
  done
}

workspace::notify() {
  local typ=$1
  local service=$2

  if [ -n "$service" ]; then
    local service_config_path=$ZMICRO_PLUGINS_CONFIGS_PATH/service/config/$service/config
    if [ -f "$service_config_path" ]; then
      config::load_file $service_config_path
    fi
  fi

  local title=""
  local message=""

  if [ -z "$service" ]; then
    title="[workspace][${typ}][user: $USER]"
    message=$(cat <<-END
# System Info\n\n
$(os::info)
END
)
  else
    title="[workspace][${typ}][user: $USER] ${SERVICE_REMOTEDEV_GIT_EMAIL} in ${SERVICE_REMOTEDEV_COMPANY}"
    message=$(cat <<-END
# Workspace Info\n
* SERVICE_REMOTEDEV_COMPANY: ${SERVICE_REMOTEDEV_COMPANY}\n
* SERVICE_REMOTEDEV_GIT_USER: ${SERVICE_REMOTEDEV_GIT_USER}\n
* SERVICE_REMOTEDEV_GIT_EMAIL: ${SERVICE_REMOTEDEV_GIT_EMAIL}\n
* SERVICE_REMOTEDEV_SSH_PORT: ${SERVICE_REMOTEDEV_SSH_PORT}\n
* SERVICE_REMOTEDEV_PREVILEGED: ${SERVICE_REMOTEDEV_PREVILEGED}\n
\n
# System Info\n\n
$(os::info)
END
)
  fi 

  notify::feishu \
    "$PLUGIN_WORKSPACE_NOTIFY_URL" \
    "$title" \
    "$message"
}

workspace::notify_create() {
  workspace::notify create
}

workspace::notify_upgrade() {
  workspace::notify upgrade
}

workspace::notify_restart() {
  workspace::notify restart
}

export -f ensure_config

export -f initialize_config
export -f initialize_common

export -f initialize_role
export -f upgrade_role

export -f workspace::env_initialize
export -f workspace::env_upgrade

export -f workspace::list
export -f workspace::check_available

export -f workspace::notify
export -f workspace::notify_create
export -f workspace::notify_upgrade
export -f workspace::notify_restart
